import React, { Component } from 'react';
import {Button, Divider, Dropdown, Form, Label, Segment } from 'semantic-ui-react';
import tr from '../../utils/Translation';
import ButtonToggle from './ButtonToggle';

const wordTypes = [
  {value: 'NONE', text: tr('N/A')},
  {value: 'NOUN', text: tr('Noun')},
  {value: 'VERB', text: tr('Verb')},
  {value: 'VERB_TRANSITIVE', text: tr('Verb tr.')},
  {value: 'VERB_INTRANSITIVE', text: tr('Verb int.')},
  {value: 'ADJECTIVE', text: tr('Adjective')},
  {value: 'ADVERB', text: tr('Adverb')},
  {value: 'PRONOUN', text: tr('Pronoun')},
  {value: 'PREPOSITION', text: tr('Preposition')},
  {value: 'CONJUNCTION', text: tr('Conjunction')},
  {value: 'INTERJECTION', text: tr('Interjection')},
  {value: 'PHRASAL_VERB', text: tr('Phrasal Verb')},
  {value: 'IDIOM', text: tr('Idiom')},
  {value: 'PHRASE', text: tr('Phrase')}
];

const initialDefinition = {
  key: '',
  value: '',
  sex: '',
  type: '',
  usage: '',
  notes: ''
};

export default class NewDefinitionForm extends Component {

  state = {
    detailsShown: false,
    definition: initialDefinition
  }

  componentWillReceiveProps(nextProps) {
    if(nextProps.definition && this.state.definition.value != nextProps.definition.value) {
      this.setState({definition: Object.assign({}, this.state.definition, {value: nextProps.definition.value} ) })
    }
  }

  onSubmit = (event, serializedForm) => {
    event.preventDefault();
    delete serializedForm['type-search']; //this is auto generated by semantic-ui dropdown-search
    serializedForm['key'] = this.props.currentWord;
    this.props.onSaveDefinition(serializedForm);
  }

  onInputChange = (name, e) => this.setState({definition: Object.assign({}, this.state.definition, {[name]: e.target.value} )} )

  onCheckableInputChange = (name, e, {value}) => this.setState({definition: Object.assign({}, this.state.definition, {[name]: value} )} )

  clearForm = (event) => {
    event.preventDefault();
    this.setState({ definition: initialDefinition });
  }

  render () {

    return (
      <Segment>
        <Label attached='top'>{tr(`Add new Definitions for ${this.props.currentWord}`)}</Label>
        <Form onSubmit={this.onSubmit}>
          <Form.Group widths='equal'>
            <Form.Input
              value={this.state.definition.value}
              placeholder={tr('You can choose from right browser')}
              name='value'
              label='Definition'
              onChange={this.onInputChange.bind(this, 'value')}
            />
          </Form.Group>
          <HorizontalToggle
            active={this.state.detailsShown}
            onToggle={(active) => this.setState({detailsShown: active})}
          />
          {this.state.detailsShown &&
            <span>
              <Form.Group inline>
                <Form.Field>
                  <Dropdown name='type' placeholder={tr('Word Type')} search selection options={wordTypes} />
                </Form.Field>
                <label>{tr(' Word sex')}</label>
                <Form.Radio name='sex' label='⚲' value='NEUTER' checked={this.state.definition.sex == 'NEUTER'} className='big-label' onChange={this.onCheckableInputChange.bind(this, 'sex')} />
                <Form.Radio name='sex' label='♂' value='MASCULINE' checked={this.state.definition.sex == 'MASCULINE'} className='big-label' onChange={this.onCheckableInputChange.bind(this, 'sex')} />
                <Form.Radio name='sex' label='♀' value='FEMININE' checked={this.state.definition.sex == 'FEMININE'} className='big-label' onChange={this.onCheckableInputChange.bind(this, 'sex')} />
              </Form.Group>
              <Form.TextArea name='usage' rows='3' value={this.state.definition.usage} onChange={this.onInputChange.bind(this, 'usage')} label={tr('Usage Examples')} placeholder={tr('Usage Examples')} />
              <Form.TextArea name='notes' rows='3' value={this.state.definition.notes} onChange={this.onInputChange.bind(this, 'notes')} label={tr('Notes')} placeholder={tr('Notes')} />
              <Form.Group inline className='no-margin'>
                <Button content={tr('Clear')} style={{marginLeft: 'auto'}} onClick={this.clearForm} />
                <Button primary content={tr('Save')} />
              </Form.Group>
            </span>
          }
        </Form>
      </Segment>
    );
  }
}

NewDefinitionForm.propTypes = {
  // currentWord is basically needed to be set as 'key' property on definition object
  currentWord: React.PropTypes.string.isRequired,
  onSaveDefinition: React.PropTypes.func.isRequired,
  definition: React.PropTypes.object,
}


const HorizontalToggle = ({active, onToggle}) => (
  <Divider horizontal style={active ? null : {marginBottom: 0}}>
    <ButtonToggle basic compact
      type='button'
      size='tiny'
      icon={active ? 'angle up' : 'angle down'}
      content={active ? tr('Less') : tr('More')}
      onToggle={onToggle}
    />
  </Divider>
);

HorizontalToggle.propTypes = {
  onToggle: React.PropTypes.func.isRequired,
  active: React.PropTypes.bool.isRequired
};
